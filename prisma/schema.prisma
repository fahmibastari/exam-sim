datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum QuestionType {
  SINGLE_CHOICE
  MULTI_SELECT
  TRUE_FALSE
  SHORT_TEXT
  ESSAY
  NUMBER
  RANGE
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  attempts  Attempt[]
}

model ExamPackage {
  id           String     @id @default(cuid())
  title        String
  description  String?
  tokenHash    String
  isActive     Boolean    @default(true)
  timeLimitMin Int?
  createdAt    DateTime   @default(now())
  questions    Question[]
  attempts     Attempt[]
}

model Question {
  id            String        @id @default(cuid())
  examPackageId String
  order         Int
  text          String
  imageUrl      String?

  // BARU:
  type          QuestionType  @default(SINGLE_CHOICE)
  points        Int           @default(1)
  required      Boolean       @default(true)
  settings      Json?

  options       AnswerOption[]
  answers       AttemptAnswer[]

  ExamPackage   ExamPackage   @relation(fields: [examPackageId], references: [id], onDelete: Cascade)

  @@unique([examPackageId, order])
}

model AnswerOption {
  id         String    @id @default(cuid())
  questionId String
  label      String
  text       String

  // BARU:
  isCorrect  Boolean   @default(false)

  Question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, label])
}

model Attempt {
  id             String     @id @default(cuid())
  userId         String?
  examPackageId  String
  startedAt      DateTime   @default(now())
  submittedAt    DateTime?

  // Ubah ke Float utk partial credit
  score          Float?
  total          Float?

  participantName  String?
  participantEmail String?
  participantInfo  String?

  User        User?        @relation(fields: [userId], references: [id])
  ExamPackage ExamPackage  @relation(fields: [examPackageId], references: [id])
  answers     AttemptAnswer[]

  @@unique([userId, examPackageId])
  @@unique([examPackageId, participantEmail])
  @@index([examPackageId])
}

model AttemptAnswer {
  id                String   @id @default(cuid())
  attemptId         String
  questionId        String

  // sebelumnya: selectedOptionIds String[]
  selectedOptionIds String[] @default([]) // âœ… default []

  valueText   String?
  valueNumber Float?
  valueJson   Json?

  score    Float?
  gradedAt DateTime?

  Attempt  Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  Question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([questionId])
}

